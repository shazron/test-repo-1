name: pr-approved

on:
  pull_request_review:
    types: [submitted]
    branches: ['master']

jobs:
  set-state:
    runs-on: ubuntu-latest
    outputs:
      pr_approved: ${{ github.event.review.state == 'approved' }}
      deploy_prod: ${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}
      deploy_dev: ${{ contains(github.event.pull_request.labels.*.name, 'deploy:dev')}}
    steps:
      - name: check fork
        if: github.event.pull_request.head.repo.full_name != github.repository
        run: echo "::error::Forks are not supported"

  echo-state:
    needs: [set-state]
    runs-on: ubuntu-latest
    steps:
      - run: echo "PR Review State - ${{ github.event.review.state }}"
      - run: echo "PR Labels - ${{ join(github.event.pull_request.labels.*.name, ',') }}"
      - run: echo "PR Approved - ${{ needs.set-state.outputs.pr_approved }}"
      - run: echo "Deploy - ${{ needs.set-state.outputs.deploy_prod }}"
      - run: echo "Deploy Dev - ${{ needs.set-state.outputs.deploy_dev }}"

  pre-build-dev:
    needs: [set-state]
    runs-on: ubuntu-latest
    if: needs.set-state.outputs.pr_approved == 'true' && needs.set-state.outputs.deploy_dev == 'true'
    steps:
      - name: 'Comment PR'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # this may fail when a PR is from a fork (security issues)
          # the user needs to be a Contributor to the repo, and 
          # create a PR from a branch in the same repo
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚è≥ Start deploy to dev'
            })

  pre-build-production:
    needs: [set-state]
    runs-on: ubuntu-latest
    if: needs.set-state.outputs.pr_approved == 'true' && needs.set-state.outputs.deploy_prod == 'true'
    steps:
      - name: 'Comment PR'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # this may fail when a PR is from a fork (security issues)
          # the user needs to be a Contributor to the repo, and 
          # create a PR from a branch in the same repo
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚è≥ Start deploy to production'
            })

  build-dev:
    needs: [pre-build-dev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: echo "approved (dev)"

  build-production:
    needs: [pre-build-production]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: echo "approved (prod)"

  post-build-dev:
    needs: [build-dev]
    runs-on: ubuntu-latest
    steps:
      - name: 'Comment PR'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # this may fail when a PR is from a fork (security issues)
          # the user needs to be a Contributor to the repo, and 
          # create a PR from a branch in the same repo
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üèÑüèΩ‚Äç‚ôÇÔ∏è Deployed to dev'
            })

  post-build-production:
    needs: [build-production]
    runs-on: ubuntu-latest
    steps:
      - name: 'Comment PR'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # this may fail when a PR is from a fork (security issues)
          # the user needs to be a Contributor to the repo, and 
          # create a PR from a branch in the same repo
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üèÑüèΩ‚Äç‚ôÇÔ∏è Deployed to production'
            })            